#BlueJ class context
comment0.target=Employee
comment0.text=\n\ Represents\ an\ employee\ in\ an\ organisation\n\ Normal\ employees\ have\ initials\ and\ a\ role\ (and\ could\ have\ further\ information)\n\ All\ employees\ (other\ than\ the\ CEO)\ have\ a\ manager,\ who\ is\ another\ employee\n\ Any\ employee\ who\ is\ a\ manager\ will\ have\ a\ set\ of\ employees\ in\ their\ team.\n\ \ (If\ an\ employee\ has\ an\ empty\ team,\ then\ they\ aren't\ a\ manager.)\n\ An\ employee\ object\ can\ also\ represent\ a\ vacant\ position\ in\ the\ organisation\n\ \ (a\ kind\ of\ "virtual\ employee"),\ represented\ by\ an\ employee\ with\ no\ name\ or\ role.\n\ \ A\ vacant\ position\ still\ has\ a\ manager\ and\ may\ have\ a\ team\ of\ employees\ under\ it.\n\ \ When\ a\ vacant\ position\ is\ filled,\ the\ initials\ and\ role\ will\ be\ filled\ in,\ turning\n\ \ the\ employee\ object\ into\ a\ regular\ employee.\n\n\ An\ employee\ is\ drawn\ as\ a\ rectangle\ containing\ their\ initials\ and\ role.\n\ Every\ employee\ (except\ the\ CEO)\ will\ be\ drawn\ with\ a\ link\ to\ their\ manager.\n\ The\ position\ where\ a\ team\ member\ of\ a\ manager\ is\ drawn\ is\ one\ layer\ down\n\ \ from\ the\ manager,\ at\ a\ horizontal\ position\ specified\ by\n\ \ the\ employee's\ offset\ -\ how\ far\ to\ the\ right\ (or\ left)\ of\ the\ manager.\n\ \ This\ means\ that\ if\ the\ manager\ is\ moved\ around\ on\ the\ screen,\ the\ team\n\ \ members\ (and\ their\ team\ members,\ and\ ....)\ will\ automatically\ move\ with\ them.\n
comment1.params=initials\ role
comment1.target=Employee(java.lang.String,\ java.lang.String)
comment1.text=\n\ Construct\ a\ new\ Employee\ object\ with\ the\ given\ initials\ and\ role\n
comment10.params=
comment10.target=boolean\ isVacant()
comment10.text=\n\ True\ if\ the\ Employee\ is\ an\ empty\ position,\ needing\ to\ be\ filled.\n
comment11.params=
comment11.target=void\ makeVacant()
comment11.text=\n\ Clear\ initials\ of\ the\ employee,\n\ but\ leave\ the\ manager\ and\ team\ members.\n\ Effectively\ makes\ this\ an\ empty\ position\ within\ the\ hierarchy,\n
comment12.params=emp
comment12.target=void\ fillVacancy(Employee)
comment12.text=\n\ Fill\ a\ vacant\ position\ by\ copying\ the\ employee\ details\ (initials)\n\ from\ emp\ into\ this\ employee\ object\n\ If\ the\ position\ is\ not\ vacant,\ does\ nothing.\n
comment13.params=x
comment13.target=void\ moveOffset(double)
comment13.text=\n\ Move\ the\ value\ offset\ so\ that\ the\ Employee\ will\ be\ drawn\ at\ position\ x\ \n\ Offset\ specifies\ where\ to\ draw\ the\ employee,\ relative\ to\ their\ manager.\n\ Offset\ is\ the\ distance\ to\ the\ right\ (or\ left,\ if\ negative)\ of\ the\ manager's\ position\n
comment14.params=off
comment14.target=void\ setOffset(double)
comment14.text=\n\ Set\ the\ offset\ value\ (horizontal\ position\ of\ employee\ relative\ to\ manager)\n\ Only\ needed\ for\ constructing\ test\ hierarchy\ or\ loading\ from\ a\ file.\n
comment15.params=
comment15.target=double\ getTop()
comment15.text=\n\ Return\ the\ top\ of\ this\ employee\ box\ (internal\ use\ only)\n\ Calculated\ \n
comment16.params=
comment16.target=double\ getX()
comment16.text=\n\ horizontal\ center\ of\ this\ employee\ box\ (internal\ use\ only)\n\ Recursive\ method,\ to\ compute\ center\ from\ the\ offset\ and\ the\ center\ of\ the\ manager.\n
comment17.params=x\ y
comment17.target=boolean\ on(double,\ double)
comment17.text=\n\ Returns\ true\ iff\ the\ point\ (x,y)\ is\ on\ top\ of\ where\n\ \ this\ employee\ is\ currently\ drawn.\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment18.text=\n\ Returns\ a\ string\ containing\ the\ details\ of\ an\ employee.\n\ if\ the\ initials\ are\ null,\ then\ will\ be\ given\ as\ "??"\n
comment19.params=
comment19.target=java.lang.String\ toStringFull()
comment19.text=\n\ Returns\ a\ string\ containing\ the\ details\ of\ an\ employee,\ plus\n\ offset\ and\ number\ of\ members\ of\ their\ team.\n\ initials\ and\ role\ may\ be\ "NULL"\n\ May\ be\ useful\ for\ saving\ to\ files\n
comment2.params=initials\ role\ offset
comment2.target=Employee(java.lang.String,\ java.lang.String,\ double)
comment2.text=\n\ Construct\ a\ new\ Employee\ object\ with\ the\ given\ initials,\ role,\ and\ offset\n\ Useful\ for\ loading\ from\ file\ \n
comment20.params=
comment20.target=void\ draw()
comment20.text=\n\ Draw\ a\ box\ representing\ the\ Employee,\ and\ \n\ connect\ it\ to\ its\ manager\ (if\ there\ is\ a\ manager)\n
comment3.params=empl
comment3.target=void\ addToTeam(Employee)
comment3.text=\ [STEP\ 1\:]\n\ Add\ a\ new\ member\ to\ the\ team\ managed\ by\ this\ employee,\ and\n\ ensure\ that\ the\ new\ team\ member\ has\ this\ employee\ as\ their\ manager\n
comment4.params=empl
comment4.target=void\ removeFromTeam(Employee)
comment4.text=\ [STEP\ 1\:]\n\ Remove\ a\ member\ of\ the\ team\ managed\ by\ this\ employee,\ and\n\ ensure\ that\ the\ team\ member\ no\ longer\ has\ this\ employee\ as\ their\ manager\n
comment5.params=
comment5.target=Employee\ getManager()
comment5.text=Returns\ the\ manager\ of\ this\ Employee
comment6.params=
comment6.target=java.lang.String\ getInitials()
comment6.text=Returns\ the\ initials\ of\ this\ Employee
comment7.params=
comment7.target=java.lang.String\ getRole()
comment7.text=Returns\ the\ role\ of\ this\ Employee
comment8.params=
comment8.target=java.util.Set\ getTeam()
comment8.text=Returns\ the\ set\ of\ employees\ in\ the\ team,
comment9.params=
comment9.target=boolean\ isManager()
comment9.text=\n\ Returns\ true\ iff\ this\ employee\ is\ managing\ any\ other\ employees\n
numComments=21
