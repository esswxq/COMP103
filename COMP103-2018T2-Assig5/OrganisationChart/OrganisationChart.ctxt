#BlueJ class context
comment0.target=OrganisationChart
comment0.text=\ <description\ of\ class\ OrganisationChart>\n
comment1.params=
comment1.target=OrganisationChart()
comment1.text=\n\ Construct\ a\ new\ OrganisationChart\ object\n\ Set\ up\ the\ GUI\n
comment10.params=empl
comment10.target=void\ drawTree(Employee)
comment10.text=\ [STEP\ 1\:]\n\ \ Recursive\ method\ to\ draw\ all\ nodes\ in\ a\ subtree,\ given\ the\ root\ node.\n\ \ \ \ \ \ \ \ (The\ provided\ code\ just\ draws\ the\ root\ node;\n\ \ \ \ \ \ \ \ \ you\ need\ to\ make\ it\ draw\ all\ the\ nodes.)\n
comment11.params=
comment11.target=void\ drawNewIcon()
comment11.text=\n\ Redraw\ the\ new\ Person\ box\n
comment12.params=
comment12.target=void\ drawRetireIcon()
comment12.text=\n\ Redraw\ the\ retirement\ Icon\n
comment13.params=x\ y
comment13.target=boolean\ onNewIcon(double,\ double)
comment13.text=is\ the\ mouse\ position\ on\ the\ New\ Person\ box
comment14.params=x\ y
comment14.target=boolean\ onRetirementIcon(double,\ double)
comment14.text=is\ the\ mouse\ position\ on\ the\ retirement\ icon
comment15.params=
comment15.target=void\ makeTestTree()
comment15.text=\n\ Makes\ an\ initial\ tree\ so\ you\ can\ test\ your\ program\n
comment16.params=empl\ indent
comment16.target=void\ printTree(Employee,\ java.lang.String)
comment17.params=arguments
comment17.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\n\ Set\ up\ the\ GUI\ (buttons\ and\ mouse)\n
comment3.params=action\ x\ y
comment3.target=void\ doMouse(java.lang.String,\ double,\ double)
comment3.text=\n\ Most\ of\ the\ work\ is\ initiated\ by\ the\ mouse.\n\ The\ action\ depends\ on\ where\ the\ mouse\ is\ pressed\:\n\ \ \ on\ an\ employee\ in\ the\ tree,\ or\n\ \ \ the\ new\ person\n\ and\ where\ it\ is\ released\:\n\ \ \ on\ another\ employee\ in\ the\ tree,\n\ \ \ on\ the\ retirement\ Icon,\ or\n\ \ \ empty\ space\n\ An\ existing\ person\ will\ be\ moved\ around\ in\ the\ tree,\ retired,\ or\ repositioned.\n\ The\ new\ person\ will\ be\ added\ into\ the\ tree;\n
comment4.params=x\ y\ empl
comment4.target=Employee\ findEmployee(double,\ double,\ Employee)
comment4.text=\n\ Find\ and\ return\ an\ employee\ that\ is\ currently\ placed\ over\ the\ position\ (x,y).\ \n\ Must\ do\ a\ recursive\ search\ of\ the\ subtree\ whose\ root\ is\ the\ given\ employee.\n\ Returns\ an\ Employee\ if\ it\ finds\ one,\n\ Returns\ null\ if\ it\ doesn't.\n\ [Completion\:]\ If\ (x,y)\ is\ on\ two\ employees,\ it\ should\ return\ the\ top\ one.\n
comment5.params=newEmpl\ target
comment5.target=void\ addNewPerson(Employee,\ Employee)
comment5.text=\n\ Add\ the\ new\ employee\ to\ the\ target\n\ [STEP\ 2\:]\ If\ target\ is\ not\ vacant,\ add\ new\ employee\ to\ the\ target's\ team\n\ [STEP\ 3\:]\ If\ target\ is\ vacant,\ fill\ the\ position\ with\ the\ initials\ of\ new\ employee\n\ [COMPLETION\:]\ If\ the\ newPerson\ has\ a\ role\ but\ no\ initials,\ change\ the\ role\ of\ the\ target.\n
comment6.params=empl\ target
comment6.target=void\ moveEmployee(Employee,\ Employee)
comment6.text=\ Move\ a\ current\ employee\ (empl)\ to\ a\ new\ position\ (target)\n\ \ [STEP\ 2\:]\ If\ the\ target\ is\ not\ vacant,\ then\n\ \ \ \ add\ the\ employee\ to\ the\ team\ of\ the\ target,\n\ \ \ \ (bringing\ the\ whole\ subtree\ of\ the\ employee\ with\ them)\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ [STEP\ 3\:]\ If\ the\ target\ is\ vacant,\ then\n\ \ \ \ \ make\ the\ employee\ fill\ the\ vacancy,\ and\n\ \ \ \ \ if\ the\ employee\ was\ a\ manager,\ then\ make\ their\ old\ position\ vacant,\ but\n\ \ \ \ \ if\ they\ were\ not\ a\ manager,\ just\ remove\ them\ from\ the\ tree.\n\ \ \ \ \ \ \ \ [COMPLETION\:]\n\ \ \ Moving\ the\ CEO\ is\ a\ problem,\ and\ shouldn't\ be\ allowed.\ \n\ \ \ In\ general,\ moving\ any\ employee\ to\ a\ target\ that\ is\ in\ the\n\ \ \ employee's\ subtree\ is\ a\ problem\ and\ should\ not\ be\ allowed.\ (Why?)\n
comment7.params=empl
comment7.target=void\ retirePerson(Employee)
comment7.text=\ STEP\ 3\n\ Retire\ an\ employee.\n\ If\ they\ are\ a\ manager\ or\ the\ CEO,\ then\ make\ the\ position\ vacant\n\ \ (leaving\ the\ employee\ object\ in\ the\ tree,\ but\ no\ initials)\n\ If\ they\ are\ not\ a\ manager,\ then\ remove\ them\ from\ the\ tree\ completely.\n
comment8.params=person\ subTree
comment8.target=boolean\ inSubtree(Employee,\ Employee)
comment8.text=\ (COMPLETION)\n\ \ \ \ \ \ \ \ Return\ true\ if\ person\ is\ in\ the\ subtree,\ and\ false\ otherwise\n\ \ \ \ \ \ \ \ Uses\ \=\=\ to\ determine\ node\ equality\n\ \ Check\ if\ person\ is\ the\ same\ as\ the\ root\ of\ subTree\n\ \ if\ not,\ check\ if\ in\ any\ of\ the\ subtrees\ of\ the\ team\ members\ of\ the\ root\n\ \ \ (recursive\ call,\ which\ must\ return\ true\ if\ it\ finds\ the\ person)\n
comment9.params=
comment9.target=void\ redraw()
comment9.text=\n\ Redraw\ the\ chart.\n
numComments=18
